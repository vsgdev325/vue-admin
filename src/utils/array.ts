/**
 * Преобразовать заданный массив в структуру в форме дерева.
 * @param arr - Оригинальный массив, каждый из которых содержит атрибуты ID и PID, PID представляет идентификатор родительского уровня.
 * @returns Вернитесь в смещенную матрицу структуры дерева.
 */
export function arrayToTree(arr: any[]) {
  // Массив результатов инициализации
  const res: any = []
  // Используйте карту для хранения элементов массива, используйте ID в качестве ключа, а сам элемент является значением
  const map = new Map()

  // Пройдя массив, храните каждый элемент с идентификатором в качестве ключа к карте
  arr.forEach((item) => {
    map.set(item.id, item)
  })

  // Еще раз путешествуйте по всему массиву и организуйте элемент в структуру в форме дерева в соответствии с PID
  arr.forEach((item) => {
    // Элементы -версии родителей, которые получают текущий элемент
    const parent = item.pid && map.get(item.pid)
    // Если есть элемент -уровни родителей
    if (parent) {
      // Если у родительского элемента уже есть детские элементы, текущий элемент добавляется в массив субэлемента
      if (parent?.children)
        parent.children.push(item)
      // Если родительский элемент не имеет субэлементов, создайте массив субэлемента и используйте текущий элемент в качестве первого элемента
      else
        parent.children = [item]
    }
    // Если нет родительского элемента, добавьте текущий элемент непосредственно в массив результатов
    else {
      res.push(item)
    }
  })
  // Вернуться к организации структуры в форме ткани
  return res
}
